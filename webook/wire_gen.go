// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"7day/webook/internal/repository"
	"7day/webook/internal/repository/cache"
	"7day/webook/internal/repository/dao/article"
	"7day/webook/internal/repository/dao/user"
	"7day/webook/internal/service"
	"7day/webook/internal/service/sms"
	"7day/webook/internal/web"
	"7day/webook/internal/web/jwt"
	"7day/webook/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *App {
	logger := ioc.InitLogger()
	cmdable := ioc.InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	v := ioc.InitMiddlewares(logger, cmdable, jwtHandler)
	db := ioc.InitDB(logger)
	userDAO := dao.NewUserDAOIml(db)
	userRepo := repository.NewUserRepoIml(userDAO, logger)
	smsSMS := sms.NewMemorySMS()
	codeCache := cache.NewCodeCacheImpl(cmdable, logger)
	codeRepo := repository.NewCodeRepoImpl(logger, codeCache)
	userSVC := service.NewUserSvcIml(userRepo, logger, smsSMS, codeRepo)
	userHandler := web.NewUserHandler(userSVC, jwtHandler)
	articleDao := article.NewArticleDaoImpl(db)
	articleCache := cache.NewArticleRedis(cmdable)
	articleRepo := repository.NewArticleRepoImpl(articleDao, articleCache, logger)
	articleSVC := service.NewArticleSVCImpl(articleRepo)
	articleHandler := web.NewArticle(articleSVC)
	engine := ioc.InitWebServer(v, userHandler, articleHandler)
	app := &App{
		Web: engine,
	}
	return app
}

// wire.go:

// web
var webConf = wire.NewSet(web.NewArticle, web.NewUserHandler)

// service
var serviceConf = wire.NewSet(service.NewUserSvcIml, service.NewArticleSVCImpl)

// SMS  短信
var SMS = wire.NewSet(sms.NewMemorySMS)

// Repo
var repo = wire.NewSet(repository.NewUserRepoIml, repository.NewCodeRepoImpl, repository.NewArticleRepoImpl)

// DAO
var daoConfi = wire.NewSet(dao.NewUserDAOIml, article.NewArticleDaoImpl)

// cache
var cacheConfig = wire.NewSet(cache.NewCodeCacheImpl, cache.NewArticleRedis)

// gin 初始化
var ginSet = wire.NewSet(jwt.NewRedisJWTHandler, ioc.InitWebServer, ioc.InitMiddlewares)

// 需要的 中间件
var middleware = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitLogger)
