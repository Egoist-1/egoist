// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_svc.go
//
// Generated by this command:
//
//	mockgen -source=./user_svc.go -package=svcmocks -destination=mocks/user_svc.mock.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	domain "7day/webook/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserSVC is a mock of UserSVC interface.
type MockUserSVC struct {
	ctrl     *gomock.Controller
	recorder *MockUserSVCMockRecorder
}

// MockUserSVCMockRecorder is the mock recorder for MockUserSVC.
type MockUserSVCMockRecorder struct {
	mock *MockUserSVC
}

// NewMockUserSVC creates a new mock instance.
func NewMockUserSVC(ctrl *gomock.Controller) *MockUserSVC {
	mock := &MockUserSVC{ctrl: ctrl}
	mock.recorder = &MockUserSVCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSVC) EXPECT() *MockUserSVCMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserSVC) Login(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserSVCMockRecorder) Login(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserSVC)(nil).Login), ctx, user)
}

// Signup mocks base method.
func (m *MockUserSVC) Signup(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserSVCMockRecorder) Signup(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserSVC)(nil).Signup), ctx, user)
}
